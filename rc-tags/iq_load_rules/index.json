
{
    "kind": "term",
    "name": "iq_load_rules",
    "count": 1,
    "items": [

    
        {
            "weight": "10",
            "url": "https://docs-preview.tealium.com/guides/iq-tag-management/load-rules/about/",
            "title": "About load rules",
            "body":"<p>A load rule determines when a tag loads on your site or app. A load rule is one or more conditions that are based on the values in the data layer. For example, a load rule condition that identifies your search page might be:</p><pre tabindex=\"0\"><code>page_type equals search</code></pre><p>The default load rule is <strong>All Pages</strong>, which contains no conditions and is always true.</p><p>The following components use load rules:</p><ul><li>Tags</li><li>Consent manager</li><li>Currency converter extension</li><li>Data validation extension</li><li>Channel extension</li></ul><h2 id=\"boolean-logic\">Boolean logic</h2><p>Multiple conditions can be combined using boolean logic to form more complex load rules. For example, to load a tag on the search page, but only when the user is not logged in, the load rule conditions might be:</p><pre tabindex=\"0\"><code>page_type equals searchANDis_logged_in equals 1</code></pre><p>This complex logic can be combined into a single rule or created as two rules and then enforced using the <strong>Match All Rules</strong> setting. See <a href=\"/guides/iq-tag-management/load-rules/manage/#assign-a-load-rule-to-a-tag\">how to assign load rules to a tag</a>.</p><h4 id=\"and-logic\">AND logic</h4><p>Use AND logic to create a rule that is true only when all of the conditions evaluate to true. For example, a rule that combines 3 conditions using AND logic evaluates to true only if each individual condition also evaluates to true. If any of the conditions evaluate to false, then the entire rule also evaluates to false.</p><h4 id=\"or-logic\">OR logic</h4><p>Use OR logic to create a rule that is true when any of the conditions evaluate to true. For example, a rule that combines 3 conditions using OR logic evaluates to true if any of the individual conditions also evaluate to true. A rule that uses OR logic only evaluates to false if all of the individual conditions also evaluate to false.</p><h2 id=\"list-of-comparison-operators\">List of comparison operators</h2><p>Each rule condition uses a comparison operator and a variable from the data layer. The following table lists the available comparison operators that can be used in load rule conditions. For operators that include <code>(ignore case)</code> in the name, the text value of the variable is converted to lowercase before the comparison.</p><table><thead><tr><th><strong>Comparison Operator</strong></th><th><strong>When a tag loads on a page</strong></th></tr></thead><tbody><tr><td><code>contains</code><br> <code>contains (ignore case)</code></td><td>The variable contains the specified sequence of characters.</td></tr><tr><td><code>does not contain</code><br> <code>does not contain (ignore case)</code></td><td>The variable does not contain the specified sequence of characters.</td></tr><tr><td><code>does not end with</code><br> <code>does not end with (ignore case)</code></td><td>The variable does not end with the specified sequence of characters.</td></tr><tr><td><code>does not equal</code><br> <code>does not equal (ignore case)</code></td><td>The variable does not equal the specified value.</td></tr><tr><td><code>does not start with</code><br> <code>does not start with (ignore case)</code></td><td>The variable does not start with the specified string of characters.</td></tr><tr><td><code>ends with</code><br> <code>ends with (ignore case)</code></td><td>The variable does not end with the specified string of characters.</td></tr><tr><td><code>equals</code><br> <code>equals (ignore case)</code></td><td>The variable equals the specified value.</td></tr><tr><td><code>greater than</code></td><td>The variable is greater than the specified value.</td></tr><tr><td><code>greater than or equal to</code></td><td>The variable is greater than or equal to the specified value.</td></tr><tr><td><code>is badge assigned</code></td><td>The badge is assigned to the visitor.<br> For use with <a href=\"https://community.tealiumiq.com/t5/Customer-Data-Hub/Data-Layer-Enrichment/ta-p/684\">data layer enrichment</a>.</td></tr><tr><td><code>is badge not assigned</code></td><td>The badge is not assigned to the visitor.<br> For use with <a href=\"https://community.tealiumiq.com/t5/Customer-Data-Hub/Data-Layer-Enrichment/ta-p/684\">data layer enrichment</a>.</td></tr><tr><td><code>is defined</code></td><td>The variable is defined in the data layer.</td></tr><tr><td><code>is not defined</code></td><td>The variable is not defined in the data layer.</td></tr><tr><td><code>is populated</code></td><td>The variable is defined in the data layer and is not blank or empty.</td></tr><tr><td><code>is not populated</code></td><td>The variable is defined in the data layer and is blank or empty.</td></tr><tr><td><code>less than</code></td><td>The variable is less than the specified value.</td></tr><tr><td><code>less than or equal to</code></td><td>The variable is less than or equal to the specified value.</td></tr><tr><td><code>regular expression</code></td><td>The variable matches the regular expression.</td></tr><tr><td><code>starts with</code><br> <code>starts with (ignore case)</code></td><td>The variable begins with the specified sequence of characters.</td></tr></tbody></table>"
        }  

    ]
}
